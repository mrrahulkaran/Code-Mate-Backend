------------app.js---------------------

app.get("/home", function (req, res) {
  res.send("welcome home");
});

app.get("/data/xyz", function (req, res) {
  res.send("no data right now");
});

app.get("/", function (req, res) {
  res.send("Hello World");
});


------------------------------------------------


/* app.post("/user", function (req, res) {
  res.send("user updated in data base");
}); */

/* app.get("/user", function (req, res) {
  res.send({ name: "rahul", phone: "7388378005" });
}); */

//advance rounting concepts
//we can use regularexpression in routing string

app.get("/ab?c", function (req, res) {
  res.send("abc");
});

app.get("/ab+c", function (req, res) {
  res.send("abc");
});

app.get("/ab*cd", function (req, res) {
  res.send("abcd");
});

app.get("/a(bc)?d", function (req, res) {
  res.send("abcd");
});

//regexx routing

/* app.get(/a/, function (req, res) {
  res.send("abcd");
}); */
app.get(/.*fly$/, function (req, res) {
  res.send("any thing before fly");
});

// how to read (get user id) value from query parameters

/* app.get("/user", function (req, res) {
  console.log(req.query);
  res.send({ firstname: "rahul", lastname: "karan" });
}); */

// how to read user id from dynamic rout ( : coulumn means dynimic routs)

app.get("/user/:userid", function (req, res) {
  console.log(req.params);
  res.send({ firstname: "akshay", lastname: "karan" });
});

-----------Route handeleing---------

app.use("/user" , rh1, rh2, rh3, rh4)

app.use(
  "/user",
  function (req, res, next) {
    // res.send("response 1");
    console.log("1st route handeler");
    next();
  },
  function (req, res, next) {
    // res.send("response 2");
    console.log("2nd route handeler");
    next();
  },
  [function (req, res, next) {
    // res.send("response 3");
    console.log("3rd route handeler");
    next();
  },
  function (req, res, next) {
    console.log("4th route handeler");
    // next();
    // res.send("response 4");
  }]
);

------Authentication ---------

// user authentication-----and--- Admin authentication

const { authUser, authAdmine } = require("./Middelwares/auth");

app.use("/admin", authAdmine, function (req, res, next) {
  next();
});
app.use("/admin/getAllUser", authAdmine, function (req, res) {
  res.send("All user data send");
});

app.use("/user", authUser, function (req, res, next) {
  next();
});

app.use("/user/data", function (req, res, next) {
  res.send("user data send");
});


------------------------------------------------------------


app.use("/getUserData", (req, res, next) => {
  throw new error("xcscsdsf");
});

//------- Error handeling using try and cathch block

app.use("/getUserData", (req, res, next) => {
  try {
    throw new error("xcscsdsf");
  } catch {
    res.status(500).send("Some error auccured ");
  }
});

//------WildcardErrorHandeling

app.use("/", (err, req, res, next) => {
  if (err) {
    res.status(500).send("Something went wrong");
  }
});

------------mongoosee model User ----------------
{
    firstName: {
      type: String,
      required: true,
      trim: true,
    },
    lastName: {
      type: String,
      trim: true,
    },
    emailId: {
      type: String,
      required: true,
      trim: true,
    },
    Password: {
      type: String,
      required: true,
      minLength: 8,
    },

    age: {
      type: Number,
      min: 16,
    },
    gender: {
      type: String,
      validate(value) {
        if (!["male", "female", "other"].includes(value)) {
          throw new Error("gender data is not valid");
        }
      },
    },
    photoUrl: {
      type: String,
      default:
        "https://cdn2.iconfinder.com/data/icons/business-hr-and-recruitment/100/account_blank_face_dummy_human_mannequin_profile_user_-512.png",
    },

    about: {
      type: String,
      default: "hi there",
    },
    skills: {
      type: [String],
    },
  },

  --------------------------------------------------------------------

   // creating JWT Token and push user id as secret data
    const token = jwt.sign({ _id: user._id }, "rahul");
